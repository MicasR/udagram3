# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
  
    # Compose images
    # compose comand
    # run: docker-compose -f <<image_compose_build_file>> build --parallel
    - run: docker-compose -f docker-compose-build.yaml build --parallel


    # Tag images
    # Tag command:
    # run: docker tag <<image_name>> <<dockerhub_name>>/<<image_name>>
    # Note: You can check the name of the images in the <<image_compose_build_file>>
    - run: docker tag udagram-api-feed dmicas/udagram-api-feed:v1
    - run: docker tag udagram-api-user dmicas/udagram-api-user:v1
    - run: docker tag udagram-frontend:local dmicas/udagram-frontend:v1
    - run: docker tag reverseproxy dmicas/reverseproxy:v1


    # Login to dockerhub
    # Login command:
    # run: echo "${{secrets.DOCKER_PASSWORD}}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin
    # Notes: Must have created the secrets in github. Choose a the repo and go to repo settings then secrets.
    - run: echo "${{secrets.DOCKER_PASSWORD}}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin

    # Push images
    # Push command
    # run: docker push <<taged_image>>
    - run: docker push dmicas/udagram-api-feed:v1
    - run: docker push dmicas/udagram-api-user:v1
    - run: docker push dmicas/udagram-frontend:v1
    - run: docker push dmicas/reverseproxy:v1